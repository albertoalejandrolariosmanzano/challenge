name: CI-CD
on:
  push:
    branches: [ api ]
  pull_request:
    branches: [ api ]

jobs:
  # install:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: smraalm/node:1.0
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Copy env file
  #       run: cp .env.example .env
  #     - name: Install dependencies
  #       run: |
  #         npm install --save-dev sequelize-cli
  #         yarn install --production
  #       # npx sequelize-cli db:migrate

  build:
    # needs: install
    runs-on: ubuntu-latest
    container:
      image: smraalm/kubetools:1.1
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Building backend API
        env:
          AWS_CONTAINER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: api-staging
        run: |
          docker build -t $AWS_CONTAINER_REGISTRY/$APP_NAME:${{ github.sha }} .
      - name: Push Image to ECR
        if: success()
        env:
          AWS_CONTAINER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: api-staging
        run: |
          docker push $AWS_CONTAINER_REGISTRY/$APP_NAME:${{ github.sha }}
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: smraalm/kubetools:1.1
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      
      - name: Deploy to cluster with helm
        env:
          AWS_CONTAINER_REGISTRY: ${{ secrets.AWS_CLIENT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          APP_NAME: api-staging
          PATHS: api
          IMG_PATH: $PATHS.image
          HOST: $PATHS.ingress
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          helm version
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_CONTAINER_REGISTRY
          aws eks update-kubeconfig --name ${{ secrets.AWS_CLUSTER_ID }} --region ${{ secrets.AWS_REGION }}
          aws sts get-caller-identity
          helm list --all-namespaces

        # helm repo add ${{ secrets.HELM_STAGE }} https://projects-charts.s3.us-east-2.amazonaws.com/api
        
        # helm repo update
        # helm repo list

        # helm upgrade --install ${{ secrets.HELM_STAGE }} ${{ secrets.HELM_STAGE }} \
        #   --set $IMG_PATH.repository=$AWS_CONTAINER_REGISTRY/$APP_NAME \
        #   --set $IMG_PATH.tag=${{ github.sha }} \
        #   -n staging