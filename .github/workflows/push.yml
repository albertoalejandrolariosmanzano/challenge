name: CI-CD
on:
  push:
    branches: [ api ]
  pull_request:
    branches: [ api ]

jobs:
  # install:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: smraalm/node:1.0
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Copy env file
  #       run: cp .env.example .env
  #     - name: Install dependencies
  #       run: |
  #         npm install --save-dev sequelize-cli
  #         yarn install --production
  #       # npx sequelize-cli db:migrate

  build:
    # needs: install
    runs-on: ubuntu-latest
    container:
      image: smraalm/kubetools:1.1
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Building backend API
        env:
          AWS_CONTAINER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: api-staging
        run: |
          docker build -t $AWS_CONTAINER_REGISTRY/$APP_NAME:${{ github.sha }} .
      - name: Push Image to ECR
        if: success()
        env:
          AWS_CONTAINER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: api-staging
        run: |
          docker push $AWS_CONTAINER_REGISTRY/$APP_NAME:${{ github.sha }}
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: smraalm/kubetools:1.1
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Deploy to cluster with helm
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
          AWS_CONTAINER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: api-staging
          PATHS: api
          IMG_PATH: $PATHS.image
          HOST: $PATHS.ingress
        with:
          args: |
            aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_CLUSTER_ID }}
            helm repo add ${{ secrets.HELM_STAGE }} ${{ secrets.HELM_REPO }}
            helm upgrade --install ${{ secrets.HELM_STAGE }} ${{ secrets.HELM_STAGE }}/api \
              --set $IMG_PATH.repository=$AWS_CONTAINER_REGISTRY/$APP_NAME \
              --set $IMG_PATH.tag=${{ github.sha }} \
              -n staging

      # - name: deploy to cluster
      #   uses: steebchen/kubectl@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: api-staging
      #     IMAGE_TAG: ${{ github.sha }}
      #   with:
      #     args: set image deployment/api-api $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # env:
        #   AWS_CONTAINER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #   APP_NAME: api-staging
        #   PATHS: api
        #   IMG_PATH: $PATHS.image
        #   HOST: $PATHS.ingress
        # run: |
        #   aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_CLUSTER_ID }}
        #   helm repo add ${{ secrets.HELM_STAGE }} ${{ secrets.HELM_REPO }}
        #   helm repo update
        #   helm upgrade ${{ secrets.HELM_STAGE }} ${{ secrets.HELM_STAGE }}/api \
        #     --set $IMG_PATH.repository=$AWS_CONTAINER_REGISTRY/$APP_NAME \
        #     --set $IMG_PATH.tag=${{ github.sha }} \
        #     -n staging

        # if [ "$CI_COMMIT_BRANCH" == "staging" ]; then REPLICA=1; CPU_R=100m; CPU_L=150m; RAM_R=64Mi; RAM_L=128Mi; else REPLICA=1; CPU_R=500m; CPU_L=1000m; RAM_R=1024Mi; RAM_L=2048Mi; fi
        # helm upgrade api api/api \
        #   --set replicaCount=$REPLICA \
        #   --set $IMG_PATH.repository=$AWS_CONTAINER_REGISTRY/$APP_NAME-2 \
        #   --set $IMG_PATH.tag=$CI_COMMIT_SHA \
        #   --set $HOST.hosts.host=$SITE_URI \
        #   # --set $PATHS.$RESOURCES.requests.cpu=$CPU_R \
        #   # --set $PATHS.$RESOURCES.requests.memory=$RAM_R \
        #   # --set $PATHS.$RESOURCES.limits.cpu=$CPU_L \
        #   # --set $PATHS.$RESOURCES.limits.memory=$RAM_L \
        #   -n staging